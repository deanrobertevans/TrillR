KBAs$Longitude[i]<- KBAData$Lon[KBAData$SITEID==KBAs$SiteCode[i]]
KBAs$AltMin[i]<- KBAData$Alt_Min[KBAData$SITEID==KBAs$SiteCode[i]]
KBAs$AltMax[i]<- if(is.na(KBAData$Alt_Max[KBAData$SITEID==KBAs$SiteCode[i]])){KBAData$Alt_Min[KBAData$SITEID==KBAs$SiteCode[i]]} else{KBAData$Alt_Max[KBAData$SITEID==KBAs$SiteCode[i]]}
}
View(KBAs)
KBAs$Prov_EN <- gsub("Newfoundland and Labrador","Newfoundland & Labrador",KBAs$Prov_EN)
KBAs$Prov_EN <- gsub("Newfoundland and Labrador","Newfoundland & Labrador",KBAs$Prov_EN)
table(KBAs$Province_EN)
table(KBAs$Prov_EN)
KBAs$Prov_FR[KBAs$Prov_FR=='Alberta'] <- "Alberta"
KBAs$Prov_FR[KBAs$Prov_FR=='British Columbia'] <- "Colombie-Britannique"
KBAs$Prov_FR[KBAs$Prov_FR=='Manitoba'] <- "Manitoba"
KBAs$Prov_FR[KBAs$Prov_FR=='New Brunswick'] <- "Nouveau-Brunswick"
KBAs$Prov_FR[KBAs$Prov_FR=='Newfoundland & Labrador'] <- "Terre-Neuve-et-Labrador"
KBAs$Prov_FR[KBAs$Prov_FR=='Northwest Territories'] <- "Territoires du Nord-Ouest"
KBAs$Prov_FR[KBAs$Prov_FR=='Nova Scotia'] <- "Nouvelle-Écosse"
KBAs$Prov_FR[KBAs$Prov_FR=='Nunavut'] <- "Nunavut"
KBAs$Prov_FR[KBAs$Prov_FR=='Ontario'] <- "Ontario"
KBAs$Prov_FR[KBAs$Prov_FR=='Prince Edward Island'] <- "Île-du-Prince-Édouard"
KBAs$Prov_FR[KBAs$Prov_FR=='Québec'] <- "Québec"
KBAs$Prov_FR[KBAs$Prov_FR=='Saskatchewan'] <- "Saskatchewan"
KBAs$Prov_FR[KBAs$Prov_FR=='Yukon'] <- "Yukon"
KBAs$AltMin <- round(KBAs$AltMin)
KBAs$AltMax <- round(KBAs$AltMax)
table(KBAs$KBAStatus)
KBAs$KBAStatus <- gsub(" Key Biodiversity Area","",KBAs$KBAStatus)
colnames(KBAs)
KBAs <- subset(KBAs,select = c("SiteCode","KBAStatus","Name_EN","Name_FR","Prov_EN",
"Prov_FR","Latitude","Longitude","AltMin","AltMax","Area","Assessed","geometry"))
KBAs$Name_EN[KBAs$SiteCode=='BC017'] <- 'Fraser River Estuary'
KBAs$Name_FR[KBAs$SiteCode=='BC017'] <- 'Fraser River Estuary'
KBAs <- KBAs[order(KBAs$SiteCode),]
write_sf(KBAs,"C:\\Users\\deane\\Desktop\\KBAWebsiteUpload\\KBASite\\KBASite.shp")
write_sf(KBAs,"C:\\Users\\deane\\Desktop\\KBAWebsiteUpload\\KBASite\\KBASite.shp")
data.frame(KBAs)
KBAs$Prov_FR[KBAs$Prov_EN=='Alberta'] <- "Alberta"
KBAs$Prov_FR[KBAs$Prov_EN=='British Columbia'] <- "Colombie-Britannique"
KBAs$Prov_FR[KBAs$Prov_EN=='Manitoba'] <- "Manitoba"
KBAs$Prov_FR[KBAs$Prov_EN=='New Brunswick'] <- "Nouveau-Brunswick"
KBAs$Prov_FR[KBAs$Prov_EN=='Newfoundland & Labrador'] <- "Terre-Neuve-et-Labrador"
KBAs$Prov_FR[KBAs$Prov_EN=='Northwest Territories'] <- "Territoires du Nord-Ouest"
KBAs$Prov_FR[KBAs$Prov_EN=='Nova Scotia'] <- "Nouvelle-Écosse"
KBAs$Prov_FR[KBAs$Prov_EN=='Nunavut'] <- "Nunavut"
KBAs$Prov_FR[KBAs$Prov_EN=='Ontario'] <- "Ontario"
KBAs$Prov_FR[KBAs$Prov_EN=='Prince Edward Island'] <- "Île-du-Prince-Édouard"
KBAs$Prov_FR[KBAs$Prov_EN=='Québec'] <- "Québec"
KBAs$Prov_FR[KBAs$Prov_EN=='Saskatchewan'] <- "Saskatchewan"
KBAs$Prov_FR[KBAs$Prov_EN=='Yukon'] <- "Yukon"
View(KBAs)
write_sf(KBAs,"C:\\Users\\deane\\Desktop\\KBAWebsiteUpload\\KBASite\\KBASite.shp")
write.csv(data.frame(KBAs)[,1:12],"C:\\Users\\deane\\Desktop\\KBAWebsiteUpload\\KBASite.csv")
rm(list = ls())
library(sf)
library(jsonlite)
library(readxl)
KBAs <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/KBAs_01182021/KBAs.shp")
IBASiteData <- read.csv("Z:/KBAWebsite/KBASiteDescript.csv", stringsAsFactors=F)
IBASiteData[IBASiteData=="NULL"] <- NA
View(IBASiteData)
colnames(IBASiteData)
KBAWebSiteData <- IBASiteData[,c(2:7,13)]
View(KBAWebSiteData)
colnames(KBAWebSiteData)
IBASiteData <- read.csv("Z:/KBAWebsite/KBASiteDescript.csv", stringsAsFactors=F)
IBASiteData[IBASiteData=="NULL"] <- NA
View(IBASiteData)
KBAWebSiteData <- IBASiteData[,c(1:7,13)]
colnames(KBAWebSiteData)
colnames(KBAWebSiteData)[1] <- "SiteCode"
colnames(KBAWebSiteData)[2] <- "SiteDescription"
colnames(KBAWebSiteData)[3] <- "BiodiversitySummary"
colnames(KBAWebSiteData)[4] <- "Conservation"
colnames(KBAWebSiteData)[5] <- "SiteDescription_FR"
colnames(KBAWebSiteData)[6] <- "BiodiversitySummary_FR"
colnames(KBAWebSiteData)[7] <- "Conservation_FR"
View(KBAWebSiteData)
KBAWebSiteData <- KBAWebSiteData[KBAWebSiteData$SiteCode %in% KBAs$SiteID,]
View(KBAs)
KBAs <- KBAs[KBAs$KBAStatus != "Important Bird Area"]
KBAs <- KBAs[KBAs$KBAStatus != "Important Bird Area",]
KBAs <- KBAs[KBAs$Deficient != "Y",]
KBAWebSiteData <- KBAWebSiteData[KBAWebSiteData$SiteCode %in% KBAs$SiteID,]
KBAs <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/KBAs_01182021/KBAs.shp")
KBAs <- KBAs[KBAs$KBAStatus != "Important Bird Area",]
KBAs <- KBAs[KBAs$Deficient != "Y",]
IBASiteData <- read.csv("Z:/KBAWebsite/KBASiteDescript.csv", stringsAsFactors=F)
IBASiteData[IBASiteData=="NULL"] <- NA
colnames(IBASiteData)
KBAWebSiteData <- IBASiteData[,c(1:7,13)]
colnames(KBAWebSiteData)
colnames(KBAWebSiteData)[1] <- "SiteCode"
colnames(KBAWebSiteData)[2] <- "SiteDescription"
colnames(KBAWebSiteData)[3] <- "BiodiversitySummary"
colnames(KBAWebSiteData)[4] <- "Conservation"
colnames(KBAWebSiteData)[5] <- "SiteDescription_FR"
colnames(KBAWebSiteData)[6] <- "BiodiversitySummary_FR"
colnames(KBAWebSiteData)[7] <- "Conservation_FR"
KBAWebSiteData <- KBAWebSiteData[KBAWebSiteData$SiteCode %in% KBAs$SiteID,]
View(KBAWebSiteData)
KBAWebSiteDatajson = toJSON(KBAWebSiteData, dataframe = "rows")
KBAWebSiteData$SiteCode[!KBAWebSiteData$SiteCode %in% KBAs$SiteID]
KBAWebSiteData$SiteCode[! KBAWebSiteData$SiteCode %in% KBAs$SiteID ]
KBAs$SiteID[! KBAs$SiteID %in% KBAWebSiteData$SiteCode]
KBAWebSiteDatajson = toJSON(KBAWebSiteData, dataframe = "rows")
as.character(KBAWebSiteDatajson)
write(as.character(KBAWebSiteDatajson),"Z:/KBAWebsite/Datatables/KBAWebSiteData.txt")
write.xlsx(KBAWebSiteData, "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
library(readxl)
write.xlsx(KBAWebSiteData, "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
?write.xlsx
??write.xlsx
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
write.xlsx(KBAWebSiteData, "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
View(KBAWebSiteData)
KBAs <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/KBAs_01182021/KBAs.shp")
KBAs <- KBAs[KBAs$KBAStatus != "Important Bird Area",]
KBAs <- KBAs[KBAs$Deficient != "Y",]
KBAs <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/KBAs_01182021/KBAs.shp")
KBAs <- KBAs[KBAs$KBAStatus != "Important Bird Area",]
KBAs <- KBAs[KBAs$Deficient != "Y",]
IBASiteData <- read_excel("Z:/KBAWebsite/IBAWebSiteData.xlsx")
View(IBASiteData)
IBASiteData[IBASiteData=="NULL"] <- NA
colnames(IBASiteData)
KBAWebSiteData <- IBASiteData[,c(1:7,13)]
View(KBAWebSiteData)
colnames(KBAWebSiteData)
colnames(KBAWebSiteData)[1] <- "SiteCode"
colnames(KBAWebSiteData)[2] <- "SiteDescription"
colnames(KBAWebSiteData)[3] <- "BiodiversitySummary"
colnames(KBAWebSiteData)[4] <- "Conservation"
colnames(KBAWebSiteData)[5] <- "SiteDescription_FR"
colnames(KBAWebSiteData)[6] <- "BiodiversitySummary_FR"
colnames(KBAWebSiteData)[7] <- "Conservation_FR"
KBAWebSiteData <- KBAWebSiteData[KBAWebSiteData$SiteCode %in% KBAs$SiteID,]
KBAs$SiteID[! KBAs$SiteID %in% KBAWebSiteData$SiteCode]
KBAWebSiteDatajson = toJSON(KBAWebSiteData, dataframe = "rows")
as.character(KBAWebSiteDatajson)
write(as.character(KBAWebSiteDatajson),"Z:/KBAWebsite/Datatables/KBAWebSiteData.txt")
write.xlsx(KBAWebSiteData, "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
View(KBAWebSiteData)
str(KBAWebSiteData)
write.xlsx(as.dataframe(KBAWebSiteData), "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
write.xlsx(data.frame(KBAWebSiteData), "Z:/KBAWebsite/Datatables/KBAWebSiteData.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
View(KBAWebSiteData)
View(KBAWebSiteData)
KBAWebSiteData$SiteDescription[KBAWebSiteData$SiteCode=="BC017"]
nchar(KBAWebSiteData$SiteDescription[KBAWebSiteData$SiteCode=="BC017"])
KBAWebSiteData$SiteDescription[KBAWebSiteData$SiteCode=="BC017"]
nchar(KBAWebSiteData$SiteDescription[KBAWebSiteData$SiteCode=="BC017"])
KBAWebSiteData$BiodiversitySummary[KBAWebSiteData$SiteCode=="BC017"]
nchar(KBAWebSiteData$BiodiversitySummary[KBAWebSiteData$SiteCode=="BC017"])
KBAWebSiteData$Conservation[KBAWebSiteData$SiteCode=="BC017"]
nchar(KBAWebSiteData$Conservation[KBAWebSiteData$SiteCode=="BC017"])
rm(list = ls())
library(sf)
library(jsonlite)
KBAs <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/KBAs_01182021/KBAs.shp")
st_crs(KBAs)
ProtectedAreas <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/Protected Areas/ProtectedAreas.shp")
ProtectedAreas <- as.data.frame(ProtectedAreas)
ProtectedAreas <- ProtectedAreas[,1:33]
ProtectedAreas <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/ProtectedAreas/ProtectedAreas.shp")
View(ProtectedAreas)
ProtectedAreas <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/ProtectedAreas/ProtectedAreas.shp")
View(ProtectedAreas)
st_crs(ProtectedAreas)
ProtectedAreas <- st_transform(ProtectedAreas,crs = st_crs(KBAs))
test <- ProtectedAreas[which(unlist(st_intersects(ProtectedAreas,KBAs[1,],sparse = FALSE))),]
View(test)
area<- st_area(test)
install.packages("lwgeom")
area<- st_area(test)
sum(as.numeric(area))/as.numeric(st_area(KBAs[1,]))
which(unlist(st_intersects(ProtectedAreas,KBAs[2,],sparse = FALSE)))
test[[1]]
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
ProtectedAreas <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/ProtectedAreas/ProtectedAreas.shp")
ProtectedAreas <- st_transform(ProtectedAreas,crs = st_crs(KBAs))
test <- ProtectedAreas[which(unlist(st_intersects(ProtectedAreas,KBAs[1,],sparse = FALSE))),]
area<- st_area(test)
sum(as.numeric(area))/as.numeric(st_area(KBAs[1,]))
which(unlist(st_intersects(ProtectedAreas,KBAs[2,],sparse = FALSE)))
test[[1]]
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
i<-60
p<- 1
protection <- ProtectedAreas[which(unlist(st_intersects(ProtectedAreas,KBAs[i,],sparse = FALSE))),]
View(protection)
ProtectedAreas <- read_sf("Z:/Key Biodiversity Areas/!KBA_Data/Shapefiles/ProtectedAreas/ProtectedAreas.shp")
ProtectedAreas <- st_transform(ProtectedAreas,crs = st_crs(KBAs))
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
i<-60
p<- 1
protection <- ProtectedAreas[which(unlist(st_intersects(ProtectedAreas,KBAs[i,],sparse = FALSE))),]
View(protection)
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
View(KBAProtection)
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- ProtectedAreas[which(unlist(st_intersects(ProtectedAreas,KBAs[i,],sparse = FALSE))),]
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
View(KBAProtection)
options(scipen=999)
View(KBAProtection)
st_area(ProtectedAreas[6,])
st_area(KBAs[2,])
10546985063/7584599207
10537079595.1/7584838793.69813
?st_crop
?st_clip
?st_intersection
test <- st_intersection(ProtectedAreas,KBAs[2,])
View(test)
st_area(test[4,])
View(test)
i<-60
p<- 1
i<-2
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
protection <- st_intersection(ProtectedAreas,KBAs[i,])
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
View(KBAProtection)
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(ProtectedAreas,KBAs[i,])
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
protection <- st_intersection(ProtectedAreas,KBAs[i,])
KBAs[i,]
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(ProtectedAreas,st_buffer(KBAs[i,], 0))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
View(KBAProtection)
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(ProtectedAreas,st_make_valid(KBAs[i,], 0))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(ProtectedAreas,st_make_valid(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
st_is_valid(KBAs[i,])
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(st_make_valid(ProtectedAreas),(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
ProtectedAreas <- st_make_valid(ProtectedAreas)
View(KBAProtection)
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(ProtectedAreas,(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
protection <- st_intersection(ProtectedAreas,(KBAs[i,]))
View(ProtectedAreas)
protection <- st_intersection(st_buffer(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i]], 0),(KBAs[i,]))
protection <- st_intersection(st_buffer(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],], 0),(KBAs[i,]))
KBAs[i,]
View(KBAProtection)
ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],]
protection <- st_intersection(st_make_valid(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],]),(KBAs[i,]))
st_is_valid(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],])
for (i in 561:nrow(KBAs)) {
protection <- st_intersection(st_make_valid(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],]),(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
for (i in 580:nrow(KBAs)) {
protection <- st_intersection(st_make_valid(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],]),(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
KBAs[561,]
KBAs[560,]
KBAs[579,]
st_is_valid(KBAs[579,])
KBAs <- st_make_valid(KBAs)
KBAProtection <- data.frame(SiteCode=character(),ProtectedArea_EN=character(),ProtectedArea_FR=character(),
IUCNCat = character(),OECM=character(),PercentCover=numeric())
for (i in 1:nrow(KBAs)) {
protection <- st_intersection(st_make_valid(ProtectedAreas[ProtectedAreas$SiteID==KBAs$SiteID[i],]),(KBAs[i,]))
if(nrow(protection)>0){
for (p in 1:nrow(protection)) {
KBAProtection <- rbind(KBAProtection,data.frame(SiteCode=KBAs$SiteID[i],
ProtectedArea_EN=protection$NAME_E[p],
ProtectedArea_FR=protection$NAME_F[p],
IUCNCat = protection$IUCN_CAT[p],
OECM=protection$OECM[p],
PercentCover=100*(as.numeric(sum(st_area(protection[p,])))/as.numeric(sum(st_area(KBAs[i,])) ))))
}
}
}
table(KBAProtection$IUCNCat)
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Ia"] <- gsub("Ia","Nature Reserve",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Ia"] )
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Ib"] <- gsub("Ib","Wilderness Area",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Ib"])
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="II"] <- gsub("II","National/Provincial Park",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="II"] )
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="III"] <- gsub("III","Natural Monument or Feature",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="III"] )
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="IV"] <- gsub("IV","Habitat/Species Management Area",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="IV"])
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="N/A"] <- gsub("N/A","Other Effective Area-based Conservation Measures",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="N/A"])
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="V"] <- gsub("V","Protected Landscape/ Seascape",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="V"] )
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="VI"] <- gsub("VI","Protected Area with sustainable use of natural resources",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="VI"])
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Yes"] <- gsub("Yes","Other Protected Area",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Yes"])
KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Unknown Protected Area"]<- gsub("Unknown Protected Area","Other Protected Area",KBAProtection$IUCNCat[KBAProtection$IUCNCat=="Unknown Protected Area"])
colnames(KBAProtection)
KBAProtection <- subset(KBAProtection, select = c("SiteCode","ProtectedArea_EN","ProtectedArea_FR", "IUCNCat","PercentCover") )
Protectionjson = toJSON(KBAProtection, dataframe = "rows")
View(KBAProtection)
write(Protectionjson,"Z:/KBAWebsite/Datatables/KBAProtection.txt")
write.xlsx(KBAProtection, "Z:/KBAWebsite/Datatables/KBAProtection.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = F, append = FALSE)
KBAs <- read_sf("C:\\Users\\deane\\Desktop\\KBASHp\\caniba_current.shp")
library(sf)
KBAs <- read_sf("C:\\Users\\deane\\Desktop\\KBASHp\\caniba_current.shp")
install.packages(c("cachem", "data.table", "Deriv", "desc", "doBy", "e1071", "farver", "Hmisc", "isoband", "lubridate", "maptools", "pbkrtest", "pkgload", "rvest", "sf", "svglite", "tidyr", "tinytex", "units", "utf8", "waldo", "xfun"))
library(devtools)
?foreach
??foreach
??stopCluster
sites <- KBAs$SiteCode
sites <- KBAData$SITEID
sitenums <- substring(sites, 2)
sitenums <- substring(sites, 3)
sitenums <- as.numeric(substring(sites, 3))
max(sitenums)
View(KBAData)
str(sitenums)
summary(sitenums)
Province <- substring(sites,1,2)
sitetable <- data.frame(SiteCode=sites,Province=substring(sites,1,2),Number=as.numeric(substring(sites, 3)))
View(sitetable)
library(doBy)
?summaryBy
summary_by(sitetable, Number ~ Province, FUN = mean)
summary_by(sitetable, Number ~ Province, FUN = max)
#### Clear Workspace ####
rm(list=ls())
library(readxl)
library(suncalc)
library(tidyverse)
library(hms)
devtools::install_github("deanrobertevans/TrillR")
library(TrillR)
#Set Sox working directory as well. This is the location of the sox.exe file
setwd("C:\\Users\\deane\\Desktop\\TrillR\\Test")
setwd("G:\\Deployed_ARU_Recordings")
# setsox.exe still loaded from step one
setsox.exe("C:/Users/deane/Desktop/sox-14.4.2/sox.exe")
#### 4. Get list of .wavs in working directory####
###This creates a dataframe with file directory, location, data/time, and julian date
###Specify the start and end dates of the selection you would like to do (e.g. start.date="2018-06-01" to end.date="2018-06-30")
data <- get.wavs(start.date = "2017-06-01",end.date = "2017-06-30", getDuration=F, minduration = 180)
locationdata <- read_excel("LV.xlsx")
data <- mergelocations(data,locationdata,locationname = "Location")
data <- getSunCalcs(data, calc = c("sunrise","sunset"),doParallel=T)
data <- data %>%  dplyr::group_by(location) %>% mutate(category=NA) %>%
mutate(start.date=min(JDay),end.date=ceiling(mean(c(max(JDay),min(JDay)))),start.time=as_hms(sunset-3600),end.time=as_hms(sunset+3600)) %>%
categorize("EN",start.date,end.date,start.time,end.time)%>%
mutate(start.date2=ceiling(mean(c(min(JDay),max(JDay))))+1,end.date2=max(JDay),start.time2=as_hms(sunset-3600),end.time2=as_hms(sunset+3600)) %>%
categorize("LN",start.date2,end.date2,start.time2,end.time2)%>%
mutate(start.date=min(JDay),end.date=ceiling(mean(c(max(JDay),min(JDay)))),start.time=as_hms(sunrise-3600),end.time=as_hms(sunrise+3600))  %>%
categorize("EE",start.date,end.date,start.time,end.time) %>%
mutate(start.date=ceiling(mean(c(min(JDay),max(JDay))))+1,end.date=max(JDay),start.time=as_hms(sunrise-3600),end.time=as_hms(sunrise+3600))  %>%
categorize("LE",start.date,end.date,start.time,end.time) %>%
mutate(start.date=min(JDay),end.date=ceiling(mean(c(max(JDay),min(JDay)))),start.time=as_hms(sunrise+3601),end.time=as_hms(sunrise+(3600*3)))  %>%
categorize("EM",start.date,end.date,start.time,end.time) %>%
mutate(start.date=ceiling(mean(c(min(JDay),max(JDay))))+1,end.date=max(JDay),start.time=as_hms(sunrise+3601),end.time=as_hms(sunrise+(3600*3)))  %>%
categorize("LM",start.date,end.date,start.time,end.time) %>%
mutate(start.date=min(JDay),end.date=ceiling(mean(c(max(JDay),min(JDay)))),start.time=as_hms(sunrise+(3600*3)+1),end.time=as_hms(sunrise+(3600*5)))  %>%
categorize("EL",start.date,end.date,start.time,end.time) %>%
mutate(start.date=ceiling(mean(c(min(JDay),max(JDay))))+1,end.date=max(JDay),start.time=as_hms(sunrise+(3600*3)+1),end.time=as_hms(sunrise+(3600*5)))  %>%
categorize("LL",start.date,end.date,start.time,end.time) %>% select(-start.date,-end.date,-start.time,-end.time)
pkgdown::build_site(examples = F)
setwd("C:\\Users\\deane\\Desktop\\TrillR Package\\GitHub\\TrillR")
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
dataselection <- data[!is.na(data$category),]
### Random sample of all eligible recordings (essentially all recordings but reorders them)
sample <- dataselection %>% group_by(location,category) %>% slice_sample(prop = 1)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\deane\\Desktop\\TrillR Package\\GitHub\\TrillR")
document()
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
document()
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
use_vignette("WorkflowV1")
document()
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F)
